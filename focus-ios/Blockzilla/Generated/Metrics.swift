// -*- mode: Swift -*-

// AUTOGENERATED BY glean_parser v8.1.1. DO NOT EDIT. DO NOT COMMIT.

#if canImport(Foundation)
    import Foundation
#endif

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


import Glean

// swiftlint:disable superfluous_disable_command
// swiftlint:disable nesting
// swiftlint:disable line_length
// swiftlint:disable identifier_name
// swiftlint:disable force_try

extension GleanMetrics {
    class GleanBuild {
        private init() {
            // Intentionally left private, no external user can instantiate a new global object.
        }

        public static let info = BuildInfo(buildDate: DateComponents(calendar: Calendar.current, timeZone: TimeZone(abbreviation: "UTC"), year: 2023, month: 11, day: 15, hour: 15, minute: 7, second: 28))
    }

    enum App {
        /// Records the name of the keyboard (custom or default) everytime
        /// the keyboard appears on the screen.
        static let keyboardType = StringMetricType( // generated from app.keyboard_type
            CommonMetricData(
                category: "app",
                name: "keyboard_type",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Recorded when a preference is changed and includes the
        /// preference that changed as well as the value changed to
        /// recorded in the extra keys.
        static let openedAsDefaultBrowser = CounterMetricType( // generated from app.opened_as_default_browser
            CommonMetricData(
                category: "app",
                name: "opened_as_default_browser",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum Browser {
        /// Counts the number of times pdf view is opened in browser.
        static let pdfViewerUsed = CounterMetricType( // generated from browser.pdf_viewer_used
            CommonMetricData(
                category: "browser",
                name: "pdf_viewer_used",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Records count of URIs visited by the user in the current session,
        /// including page reloads.
        /// It does not include background page requests and URIs from embedded pages
        /// but may be incremented without user interaction by website scripts
        /// that programmatically redirect to a new location.
        static let totalUriCount = CounterMetricType( // generated from browser.total_uri_count
            CommonMetricData(
                category: "browser",
                name: "total_uri_count",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum BrowserMenu {
        struct BrowserMenuActionExtra: EventExtras {
            var item: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let item = self.item {
                    record["item"] = String(item)
                }

                return record
            }
        }

        /// The user has tapped on a browser menu item.
        static let browserMenuAction = EventMetricType<BrowserMenuActionExtra>( // generated from browser_menu.browser_menu_action
            CommonMetricData(
                category: "browser_menu",
                name: "browser_menu_action",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["item"]
        )

    }

    enum BrowserSearch {
        private static let adClicksLabel = CounterMetricType( // generated from browser_search.ad_clicks
            CommonMetricData(
                category: "browser_search",
                name: "ad_clicks",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records clicks of adverts on SERP pages.
        /// The key format is ‘<provider-name>’.
        static let adClicks = try! LabeledMetricType<CounterMetricType>( // generated from browser_search.ad_clicks
            category: "browser_search",
            name: "ad_clicks",
            sendInPings: ["baseline", "metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: adClicksLabel,
            labels: nil
        )

        private static let inContentLabel = CounterMetricType( // generated from browser_search.in_content
            CommonMetricData(
                category: "browser_search",
                name: "in_content",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records the type of interaction a user has on SERP pages.
        static let inContent = try! LabeledMetricType<CounterMetricType>( // generated from browser_search.in_content
            category: "browser_search",
            name: "in_content",
            sendInPings: ["baseline", "metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: inContentLabel,
            labels: nil
        )

        private static let searchCountLabel = CounterMetricType( // generated from browser_search.search_count
            CommonMetricData(
                category: "browser_search",
                name: "search_count",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// The labels for this counter are `<search-engine-name>.<source>`.
        /// If the search engine is bundled with Focus `search-engine-name` will be
        /// the name of the search engine. If it's a custom search engine (defined:
        /// https://github.com/mozilla-mobile/fenix/issues/1607) the value will be
        /// `custom`.
        /// `source` will be: `action`, `suggestion`, `widget`, `shortcut`, `topsite`
        /// (depending on the source from which the search started). Also added the
        /// `other` option for the source but it should never enter on this case.
        static let searchCount = try! LabeledMetricType<CounterMetricType>( // generated from browser_search.search_count
            category: "browser_search",
            name: "search_count",
            sendInPings: ["baseline", "metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: searchCountLabel,
            labels: nil
        )

        private static let withAdsLabel = CounterMetricType( // generated from browser_search.with_ads
            CommonMetricData(
                category: "browser_search",
                name: "with_ads",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records counts of SERP pages with adverts displayed.
        /// The key format is ‘<provider-name>’.
        static let withAds = try! LabeledMetricType<CounterMetricType>( // generated from browser_search.with_ads
            category: "browser_search",
            name: "with_ads",
            sendInPings: ["baseline", "metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: withAdsLabel,
            labels: nil
        )

    }

    enum DefaultBrowserOnboarding {
        struct SkipButtonTappedExtra: EventExtras {
            var currentItem: Int32?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let currentItem = self.currentItem {
                    record["current_item"] = String(currentItem)
                }

                return record
            }
        }

        /// Counts the number of times default browser onboarding is dismissed.
        static let dismissPressed = CounterMetricType( // generated from default_browser_onboarding.dismiss_pressed
            CommonMetricData(
                category: "default_browser_onboarding",
                name: "dismiss_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times the Go To Settings button on
        /// default browser onboarding is clicked.
        static let goToSettingsPressed = CounterMetricType( // generated from default_browser_onboarding.go_to_settings_pressed
            CommonMetricData(
                category: "default_browser_onboarding",
                name: "go_to_settings_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// The user has tapped to skip onboarding.
        static let skipButtonTapped = EventMetricType<SkipButtonTappedExtra>( // generated from default_browser_onboarding.skip_button_tapped
            CommonMetricData(
                category: "default_browser_onboarding",
                name: "skip_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["current_item"]
        )

    }

    enum LegacyIds {
        /// The client id from legacy telemetry.
        static let clientId = UuidMetricType( // generated from legacy.ids.client_id
            CommonMetricData(
                category: "legacy.ids",
                name: "client_id",
                sendInPings: ["deletion-request"],
                lifetime: .user,
                disabled: false
            )
        )

    }

    enum MozillaProducts {
        /// If Firefox is installed on the users's device.
        static let hasFirefoxInstalled = BooleanMetricType( // generated from mozilla_products.has_firefox_installed
            CommonMetricData(
                category: "mozilla_products",
                name: "has_firefox_installed",
                sendInPings: ["metrics"],
                lifetime: .application,
                disabled: false
            )
        )

    }

    enum Onboarding {
        struct CardViewExtra: EventExtras {
            var cardType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }

                return record
            }
        }

        struct CloseTapExtra: EventExtras {
            var cardType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }

                return record
            }
        }

        struct PrimaryButtonTapExtra: EventExtras {
            var cardType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }

                return record
            }
        }

        struct SecondaryButtonTapExtra: EventExtras {
            var cardType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }

                return record
            }
        }

        /// Records when an onboarding card is shown
        static let cardView = EventMetricType<CardViewExtra>( // generated from onboarding.card_view
            CommonMetricData(
                category: "onboarding",
                name: "card_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["card_type"]
        )

        /// Records when the user closes the onboarding.
        static let closeTap = EventMetricType<CloseTapExtra>( // generated from onboarding.close_tap
            CommonMetricData(
                category: "onboarding",
                name: "close_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["card_type"]
        )

        /// Records when the primary button is tap during the onboarding
        static let primaryButtonTap = EventMetricType<PrimaryButtonTapExtra>( // generated from onboarding.primary_button_tap
            CommonMetricData(
                category: "onboarding",
                name: "primary_button_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["card_type"]
        )

        /// Records when the secondary button is tap during the onboarding
        static let secondaryButtonTap = EventMetricType<SecondaryButtonTapExtra>( // generated from onboarding.secondary_button_tap
            CommonMetricData(
                category: "onboarding",
                name: "secondary_button_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["card_type"]
        )

    }

    enum Preferences {
        /// A string that indicates the theme. Can be one of "Light", "Dark", or "Follow
        /// device". Default is "Follow device".
        static let userTheme = StringMetricType( // generated from preferences.user_theme
            CommonMetricData(
                category: "preferences",
                name: "user_theme",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum Search {
        /// The default search engine name if the search engine is
        /// pre-loaded with Focus.  If it's a custom search engine,
        /// then the value will be 'custom'.
        static let defaultEngine = StringMetricType( // generated from search.default_engine
            CommonMetricData(
                category: "search",
                name: "default_engine",
                sendInPings: ["baseline", "metrics"],
                lifetime: .application,
                disabled: false
            )
        )

    }

    enum SearchSuggestions {
        struct SearchTappedExtra: EventExtras {
            var engineName: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let engineName = self.engineName {
                    record["engine_name"] = String(engineName)
                }

                return record
            }
        }

        struct SuggestionTappedExtra: EventExtras {
            var engineName: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let engineName = self.engineName {
                    record["engine_name"] = String(engineName)
                }

                return record
            }
        }

        /// Search suggestion selected.
        static let autocompleteArrowTapped = EventMetricType<NoExtras>( // generated from search_suggestions.autocomplete_arrow_tapped
            CommonMetricData(
                category: "search_suggestions",
                name: "autocomplete_arrow_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// The typed text search was selected.
        static let searchTapped = EventMetricType<SearchTappedExtra>( // generated from search_suggestions.search_tapped
            CommonMetricData(
                category: "search_suggestions",
                name: "search_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["engine_name"]
        )

        /// Search suggestion selected.
        static let suggestionTapped = EventMetricType<SuggestionTappedExtra>( // generated from search_suggestions.suggestion_tapped
            CommonMetricData(
                category: "search_suggestions",
                name: "suggestion_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["engine_name"]
        )

    }

    enum SettingsScreen {
        /// A counter that indicates how many times a user has added
        /// a website to the autocomplete list.
        static let autocompleteDomainAdded = CounterMetricType( // generated from settings_screen.autocomplete_domain_added
            CommonMetricData(
                category: "settings_screen",
                name: "autocomplete_domain_added",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// Counts the number of times setting as default
        /// browser menu option is tapped.
        static let setAsDefaultBrowserPressed = CounterMetricType( // generated from settings_screen.set_as_default_browser_pressed
            CommonMetricData(
                category: "settings_screen",
                name: "set_as_default_browser_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum Shortcuts {
        /// A counter that indicates how many times a user has added
        /// a website to shortcuts.
        static let shortcutAddedCounter = CounterMetricType( // generated from shortcuts.shortcut_added_counter
            CommonMetricData(
                category: "shortcuts",
                name: "shortcut_added_counter",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// A counter that indicates how many times a user has opened
        /// a website from a shortcut in the home screen.
        static let shortcutOpenedCounter = CounterMetricType( // generated from shortcuts.shortcut_opened_counter
            CommonMetricData(
                category: "shortcuts",
                name: "shortcut_opened_counter",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        private static let shortcutRemovedCounterLabel = CounterMetricType( // generated from shortcuts.shortcut_removed_counter
            CommonMetricData(
                category: "shortcuts",
                name: "shortcut_removed_counter",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// A counter that indicates how many times a user has removed
        /// a website from shortcuts.
        /// It also indicates the screen it was removed from, home or browser.
        static let shortcutRemovedCounter = try! LabeledMetricType<CounterMetricType>( // generated from shortcuts.shortcut_removed_counter
            category: "shortcuts",
            name: "shortcut_removed_counter",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: true,
            subMetric: shortcutRemovedCounterLabel,
            labels: ["removed_from_browser_menu", "removed_from_home_screen"]
        )

        /// The number of shortcuts the user has on home screen,
        /// 0, 1, 2, 3 or 4 (maximum)
        static let shortcutsOnHomeNumber = QuantityMetricType( // generated from shortcuts.shortcuts_on_home_number
            CommonMetricData(
                category: "shortcuts",
                name: "shortcuts_on_home_number",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

    }

    enum ShowSearchSuggestions {
        struct ChangedFromSettingsExtra: EventExtras {
            var isEnabled: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isEnabled = self.isEnabled {
                    record["is_enabled"] = String(isEnabled)
                }

                return record
            }
        }

        /// The enabled state has been changed from the settings screen.
        static let changedFromSettings = EventMetricType<ChangedFromSettingsExtra>( // generated from show_search_suggestions.changed_from_settings
            CommonMetricData(
                category: "show_search_suggestions",
                name: "changed_from_settings",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_enabled"]
        )

        /// The "no"" option from the suggestion panel has been tapped.
        static let disabledFromPanel = EventMetricType<NoExtras>( // generated from show_search_suggestions.disabled_from_panel
            CommonMetricData(
                category: "show_search_suggestions",
                name: "disabled_from_panel",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// The "yes" option from the suggestion panel has been tapped.
        static let enabledFromPanel = EventMetricType<NoExtras>( // generated from show_search_suggestions.enabled_from_panel
            CommonMetricData(
                category: "show_search_suggestions",
                name: "enabled_from_panel",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum Siri {
        /// Siri request erase session and open.
        static let eraseAndOpen = EventMetricType<NoExtras>( // generated from siri.erase_and_open
            CommonMetricData(
                category: "siri",
                name: "erase_and_open",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Siri request erase session.
        static let eraseInBackground = EventMetricType<NoExtras>( // generated from siri.erase_in_background
            CommonMetricData(
                category: "siri",
                name: "erase_in_background",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Siri request open favorite site.
        static let openFavoriteSite = EventMetricType<NoExtras>( // generated from siri.open_favorite_site
            CommonMetricData(
                category: "siri",
                name: "open_favorite_site",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum TrackingProtection {
        struct TrackerSettingChangedExtra: EventExtras {
            var isEnabled: Bool?
            var sourceOfChange: String?
            var trackerChanged: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isEnabled = self.isEnabled {
                    record["is_enabled"] = String(isEnabled)
                }
                if let sourceOfChange = self.sourceOfChange {
                    record["source_of_change"] = String(sourceOfChange)
                }
                if let trackerChanged = self.trackerChanged {
                    record["tracker_changed"] = String(trackerChanged)
                }

                return record
            }
        }

        struct TrackingProtectionChangedExtra: EventExtras {
            var isEnabled: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isEnabled = self.isEnabled {
                    record["is_enabled"] = String(isEnabled)
                }

                return record
            }
        }

        /// The user has changed the setting for enhanced tracking protection
        /// at least once.
        static let hasAdvertisingBlocked = BooleanMetricType( // generated from tracking_protection.has_advertising_blocked
            CommonMetricData(
                category: "tracking_protection",
                name: "has_advertising_blocked",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// The user has changed the setting for enhanced tracking protection
        /// at least once.
        static let hasAnalyticsBlocked = BooleanMetricType( // generated from tracking_protection.has_analytics_blocked
            CommonMetricData(
                category: "tracking_protection",
                name: "has_analytics_blocked",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// The user has changed the setting for enhanced tracking protection
        /// at least once.
        static let hasContentBlocked = BooleanMetricType( // generated from tracking_protection.has_content_blocked
            CommonMetricData(
                category: "tracking_protection",
                name: "has_content_blocked",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// The user has changed the setting for enhanced tracking protection
        /// at least once.
        static let hasEverChangedEtp = BooleanMetricType( // generated from tracking_protection.has_ever_changed_etp
            CommonMetricData(
                category: "tracking_protection",
                name: "has_ever_changed_etp",
                sendInPings: ["metrics"],
                lifetime: .user,
                disabled: false
            )
        )

        /// The user has changed the setting for enhanced tracking protection
        /// at least once.
        static let hasSocialBlocked = BooleanMetricType( // generated from tracking_protection.has_social_blocked
            CommonMetricData(
                category: "tracking_protection",
                name: "has_social_blocked",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// A counter that indicates how many times a user has opened
        /// the tracking protection settings panel from the toolbar.
        static let toolbarShieldClicked = CounterMetricType( // generated from tracking_protection.toolbar_shield_clicked
            CommonMetricData(
                category: "tracking_protection",
                name: "toolbar_shield_clicked",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: true
            )
        )

        /// The user has changed the advertising tracker protection state.
        static let trackerSettingChanged = EventMetricType<TrackerSettingChangedExtra>( // generated from tracking_protection.tracker_setting_changed
            CommonMetricData(
                category: "tracking_protection",
                name: "tracker_setting_changed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["is_enabled", "source_of_change", "tracker_changed"]
        )

        /// The user has changed the setting for enhanced tracking protection.
        static let trackingProtectionChanged = EventMetricType<TrackingProtectionChangedExtra>( // generated from tracking_protection.tracking_protection_changed
            CommonMetricData(
                category: "tracking_protection",
                name: "tracking_protection_changed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: true
            )
            , ["is_enabled"]
        )

    }

    enum UrlInteraction {
        /// Drag interaction started.
        static let dragStarted = EventMetricType<NoExtras>( // generated from url_interaction.drag_started
            CommonMetricData(
                category: "url_interaction",
                name: "drag_started",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Drop interaction ended.
        static let dropEnded = EventMetricType<NoExtras>( // generated from url_interaction.drop_ended
            CommonMetricData(
                category: "url_interaction",
                name: "drop_ended",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Paste url and navigate.
        static let pasteAndGo = EventMetricType<NoExtras>( // generated from url_interaction.paste_and_go
            CommonMetricData(
                category: "url_interaction",
                name: "paste_and_go",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

}
